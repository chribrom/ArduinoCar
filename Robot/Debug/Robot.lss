
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800206  00800206  00000332  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011c9  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ded  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d5  00000000  00000000  000023ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085b  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018d  00000000  00000000  00003203  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	de c0       	rjmp	.+444    	; 0x22a <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e9       	ldi	r30, 0x98	; 152
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 31       	cpi	r26, 0x1F	; 31
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	b9 c0       	rjmp	.+370    	; 0x294 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
	ICR1 = 0xFFFF; 
}


int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	27 97       	sbiw	r28, 0x07	; 7
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
	//setupPwm();
	MotorPWM motorControll; 
	MotorIo motorDirectionControl; 
	Uart uart; 
	uart.setup(); 
 138:	ce 01       	movw	r24, r28
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	13 d0       	rcall	.+38     	; 0x164 <_ZN4Uart5setupEv>
	unsigned char a[] = "Hello"; 
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f2 e0       	ldi	r31, 0x02	; 2
 144:	de 01       	movw	r26, r28
 146:	12 96       	adiw	r26, 0x02	; 2
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x24>
	uart.sendData(a);
 150:	be 01       	movw	r22, r28
 152:	6e 5f       	subi	r22, 0xFE	; 254
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	1b d0       	rcall	.+54     	; 0x192 <_ZN4Uart8sendDataEPh>
	while(true)
	{
		uart.sendReceivedData();
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	27 d0       	rcall	.+78     	; 0x1b0 <_ZN4Uart16sendReceivedDataEv>
 162:	fc cf       	rjmp	.-8      	; 0x15c <main+0x38>

00000164 <_ZN4Uart5setupEv>:
bool Uart::receivedMessage = false; 

bool received = false; 
void Uart::setup()
{
	sei();
 164:	78 94       	sei
	Uart::buffer[9] = '\0'; //Why?
 166:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <_ZN4Uart6bufferE+0x9>
	UBRR0H = (unsigned char) (MYUBRR >> 8);
 16a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char) MYUBRR;
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //Enable receive and transmit interrupt as well as receiver and transmitter
 174:	88 ed       	ldi	r24, 0xD8	; 216
 176:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C &= ~((1 << UMSEL00 ) | ( 1 << UMSEL01)); // Set both to zero, async
 17a:	e2 ec       	ldi	r30, 0xC2	; 194
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8f 73       	andi	r24, 0x3F	; 63
 182:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0); // 1 Stop bit
 184:	80 81       	ld	r24, Z
 186:	87 7f       	andi	r24, 0xF7	; 247
 188:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // 8 data bits
 18a:	80 81       	ld	r24, Z
 18c:	86 60       	ori	r24, 0x06	; 6
 18e:	80 83       	st	Z, r24
 190:	08 95       	ret

00000192 <_ZN4Uart8sendDataEPh>:
	
}

void Uart::sendData(unsigned char data[])
{
	while(!(UCSR0A & (1 << UDRE0)))
 192:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 196:	85 ff       	sbrs	r24, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <_ZN4Uart8sendDataEPh>
	{
		//Block, wait until read to send
	}
	Uart::messageToSend = data;
 19a:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <_ZN4Uart13messageToSendE+0x1>
 19e:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <_ZN4Uart13messageToSendE>
	Uart::messageToSendIndex = 0; 
 1a2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZN4Uart18messageToSendIndexE>
	UDR0 = Uart::messageToSend[messageToSendIndex]; 
 1a6:	fb 01       	movw	r30, r22
 1a8:	80 81       	ld	r24, Z
 1aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1ae:	08 95       	ret

000001b0 <_ZN4Uart16sendReceivedDataEv>:
}

void Uart::sendReceivedData()
{
	if(Uart::receivedMessage)
 1b0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 1b4:	22 23       	and	r18, r18
 1b6:	29 f0       	breq	.+10     	; 0x1c2 <_ZN4Uart16sendReceivedDataEv+0x12>
	{
		sendData(buffer);
 1b8:	6b e0       	ldi	r22, 0x0B	; 11
 1ba:	72 e0       	ldi	r23, 0x02	; 2
 1bc:	ea df       	rcall	.-44     	; 0x192 <_ZN4Uart8sendDataEPh>
		Uart::receivedMessage = false; 
 1be:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
 1c2:	08 95       	ret

000001c4 <__vector_25>:
	}
	
}

ISR(USART0_RX_vect)
{	
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0b b6       	in	r0, 0x3b	; 59
 1d0:	0f 92       	push	r0
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	Uart::buffer[Uart::messageReceiveIndex] = UDR0;
 1de:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZN4Uart19messageReceiveIndexE>
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1ea:	f9 01       	movw	r30, r18
 1ec:	e5 5f       	subi	r30, 0xF5	; 245
 1ee:	fd 4f       	sbci	r31, 0xFD	; 253
 1f0:	90 83       	st	Z, r25
	if(Uart::buffer[Uart::messageReceiveIndex] == '\n') //When connecting to nano, use null 
 1f2:	9a 30       	cpi	r25, 0x0A	; 10
 1f4:	51 f4       	brne	.+20     	; 0x20a <__vector_25+0x46>
	{//End of message from arduino serial	
		Uart::buffer[Uart::messageReceiveIndex] = '\0'; //Change newline with null
 1f6:	f9 01       	movw	r30, r18
 1f8:	e5 5f       	subi	r30, 0xF5	; 245
 1fa:	fd 4f       	sbci	r31, 0xFD	; 253
 1fc:	10 82       	st	Z, r1
		Uart::messageReceiveIndex = 0;
 1fe:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZN4Uart19messageReceiveIndexE>
		Uart::receivedMessage = true;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 208:	03 c0       	rjmp	.+6      	; 0x210 <__vector_25+0x4c>
	}
	else
	{
		Uart::messageReceiveIndex++;
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZN4Uart19messageReceiveIndexE>
	}
}
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0b be       	out	0x3b, r0	; 59
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_27>:

ISR(USART0_TX_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	0b b6       	in	r0, 0x3b	; 59
 236:	0f 92       	push	r0
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
	if(Uart::messageToSend[Uart::messageToSendIndex] == '\0')
 244:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <_ZN4Uart13messageToSendE>
 248:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <_ZN4Uart13messageToSendE+0x1>
 24c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZN4Uart18messageToSendIndexE>
 250:	f9 01       	movw	r30, r18
 252:	e8 0f       	add	r30, r24
 254:	f1 1d       	adc	r31, r1
 256:	90 81       	ld	r25, Z
 258:	91 11       	cpse	r25, r1
 25a:	06 c0       	rjmp	.+12     	; 0x268 <__vector_27+0x3e>
	{//Check if last char sent was nul
		UCSR0A |= (1 << TXC0); // Stop sending
 25c:	e0 ec       	ldi	r30, 0xC0	; 192
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 64       	ori	r24, 0x40	; 64
 264:	80 83       	st	Z, r24
 266:	09 c0       	rjmp	.+18     	; 0x27a <__vector_27+0x50>
	}
	else
	{
		UDR0 = Uart::messageToSend[++Uart::messageToSendIndex];
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZN4Uart18messageToSendIndexE>
 26e:	f9 01       	movw	r30, r18
 270:	e8 0f       	add	r30, r24
 272:	f1 1d       	adc	r31, r1
 274:	80 81       	ld	r24, Z
 276:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0b be       	out	0x3b, r0	; 59
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
