
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000036c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800206  00800206  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018eb  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001036  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b0  00000000  00000000  00002e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00003504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa9  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000402  00000000  00000000  00004175  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	fc c0       	rjmp	.+504    	; 0x25e <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c1       	rjmp	.+636    	; 0x2ea <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 34       	cpi	r26, 0x45	; 69
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	23 c1       	rjmp	.+582    	; 0x368 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
	ICR1 = 0xFFFF; 
}


int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	6d 97       	sbiw	r28, 0x1d	; 29
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
};

class CommandHandler
{
	public:
		CommandHandler() = default; 
 138:	1a 82       	std	Y+2, r1	; 0x02
 13a:	19 82       	std	Y+1, r1	; 0x01
	//setupPwm();
	MotorPWM motorControll; 
	MotorIo motorDirectionControl;
	CommandHandler commandHandler; 
	Uart uart; 
	uart.setup();
 13c:	ce 01       	movw	r24, r28
 13e:	47 96       	adiw	r24, 0x17	; 23
 140:	3e d0       	rcall	.+124    	; 0x1be <_ZN4Uart5setupEv>
	commandHandler.dependencyInject(&uart); 
 142:	be 01       	movw	r22, r28
 144:	69 5e       	subi	r22, 0xE9	; 233
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	13 d0       	rcall	.+38     	; 0x174 <_ZN14CommandHandler16dependencyInjectEP4Uart>
	 
	char a[] = "Hello"; 
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	e0 e0       	ldi	r30, 0x00	; 0
 152:	f2 e0       	ldi	r31, 0x02	; 2
 154:	de 01       	movw	r26, r28
 156:	58 96       	adiw	r26, 0x18	; 24
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	8a 95       	dec	r24
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x34>
	uart.sendData(a);
 160:	be 01       	movw	r22, r28
 162:	68 5e       	subi	r22, 0xE8	; 232
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	ce 01       	movw	r24, r28
 168:	47 96       	adiw	r24, 0x17	; 23
 16a:	40 d0       	rcall	.+128    	; 0x1ec <_ZN4Uart8sendDataEPc>
	while(true)
	{
		//uart.sendReceivedData();
		commandHandler.execute(); 
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0d d0       	rcall	.+26     	; 0x18c <_ZN14CommandHandler7executeEv>
 172:	fc cf       	rjmp	.-8      	; 0x16c <main+0x48>

00000174 <_ZN14CommandHandler16dependencyInjectEP4Uart>:
ï»¿#include "CommandHandler.h"

void CommandHandler::dependencyInject(Uart * uart)
{
	m_Uart = uart; 
 174:	fc 01       	movw	r30, r24
 176:	71 83       	std	Z+1, r23	; 0x01
 178:	60 83       	st	Z, r22
 17a:	08 95       	ret

0000017c <_ZN14CommandHandler17handleUartCommandEPc>:



void CommandHandler::handleUartCommand(char uartCommand[] )
{
	m_Uart->sendData(m_message);
 17c:	bc 01       	movw	r22, r24
 17e:	6e 5f       	subi	r22, 0xFE	; 254
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	91 81       	ldd	r25, Z+1	; 0x01
 188:	31 c0       	rjmp	.+98     	; 0x1ec <_ZN4Uart8sendDataEPc>
 18a:	08 95       	ret

0000018c <_ZN14CommandHandler7executeEv>:
		break;
	}
}

void CommandHandler::execute()
{
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	fc 01       	movw	r30, r24
	if(m_Uart != nullptr)
 196:	80 81       	ld	r24, Z
 198:	91 81       	ldd	r25, Z+1	; 0x01
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	59 f0       	breq	.+22     	; 0x1b4 <_ZN14CommandHandler7executeEv+0x28>
 19e:	ef 01       	movw	r28, r30
	{
		if(m_Uart->getLatestMessage(m_message))
 1a0:	8f 01       	movw	r16, r30
 1a2:	0e 5f       	subi	r16, 0xFE	; 254
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	b8 01       	movw	r22, r16
 1a8:	3d d0       	rcall	.+122    	; 0x224 <_ZN4Uart16getLatestMessageEPc>
 1aa:	88 23       	and	r24, r24
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <_ZN14CommandHandler7executeEv+0x28>
		{
			handleUartCommand(m_message);
 1ae:	b8 01       	movw	r22, r16
 1b0:	ce 01       	movw	r24, r28
 1b2:	e4 df       	rcall	.-56     	; 0x17c <_ZN14CommandHandler17handleUartCommandEPc>
		}
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	08 95       	ret

000001be <_ZN4Uart5setupEv>:
void Uart::sendReceivedData() //This should be deleted
{
	if(Uart::receivedNewMessage)
	{
		sendData(buffer);
		Uart::receivedNewMessage = false; 
 1be:	78 94       	sei
 1c0:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <_ZN4Uart6bufferE+0x9>
 1c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 1c8:	87 e6       	ldi	r24, 0x67	; 103
 1ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 1ce:	88 ed       	ldi	r24, 0xD8	; 216
 1d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
 1d4:	e2 ec       	ldi	r30, 0xC2	; 194
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	8f 73       	andi	r24, 0x3F	; 63
 1dc:	80 83       	st	Z, r24
 1de:	80 81       	ld	r24, Z
 1e0:	87 7f       	andi	r24, 0xF7	; 247
 1e2:	80 83       	st	Z, r24
 1e4:	80 81       	ld	r24, Z
 1e6:	86 60       	ori	r24, 0x06	; 6
 1e8:	80 83       	st	Z, r24
 1ea:	08 95       	ret

000001ec <_ZN4Uart8sendDataEPc>:
 1ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 1f0:	85 ff       	sbrs	r24, 5
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <_ZN4Uart8sendDataEPc>
 1f4:	44 e1       	ldi	r20, 0x14	; 20
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	89 e0       	ldi	r24, 0x09	; 9
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	a6 d0       	rcall	.+332    	; 0x34a <strncpy>
 1fe:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZN4Uart18messageToSendIndexE>
 202:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_ZN4Uart13messageToSendE>
 206:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 20a:	08 95       	ret

0000020c <_ZN4Uart15enableInterruptEv>:
	return false; 
}

void Uart::enableInterrupt()
{
	UCSR0B |= (1<<RXCIE0);
 20c:	e1 ec       	ldi	r30, 0xC1	; 193
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 68       	ori	r24, 0x80	; 128
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <_ZN4Uart16disableInterruptEv>:
}

void Uart::disableInterrupt()
{
	UCSR0B &= ~(1<<RXCIE0);
 218:	e1 ec       	ldi	r30, 0xC1	; 193
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8f 77       	andi	r24, 0x7F	; 127
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <_ZN4Uart16getLatestMessageEPc>:
	}
	
}

bool Uart::getLatestMessage(char message[] )
{
 224:	ef 92       	push	r14
 226:	ff 92       	push	r15
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
	
	if(Uart::receivedNewMessage)
 22e:	c0 91 06 02 	lds	r28, 0x0206	; 0x800206 <__data_end>
 232:	cc 23       	and	r28, r28
 234:	69 f0       	breq	.+26     	; 0x250 <_ZN4Uart16getLatestMessageEPc+0x2c>
 236:	7b 01       	movw	r14, r22
 238:	8c 01       	movw	r16, r24
	{
		disableInterrupt();
 23a:	ee df       	rcall	.-36     	; 0x218 <_ZN4Uart16disableInterruptEv>
		Uart::receivedNewMessage = false; 
 23c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <__data_end>
		strncpy(message, Uart::lastReceivedMessage, 20); 
 240:	44 e1       	ldi	r20, 0x14	; 20
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	6d e1       	ldi	r22, 0x1D	; 29
 246:	72 e0       	ldi	r23, 0x02	; 2
 248:	c7 01       	movw	r24, r14
 24a:	7f d0       	rcall	.+254    	; 0x34a <strncpy>
		enableInterrupt();
 24c:	c8 01       	movw	r24, r16
 24e:	de df       	rcall	.-68     	; 0x20c <_ZN4Uart15enableInterruptEv>
 250:	8c 2f       	mov	r24, r28
		return true; 
	}
	
	return false; 
}
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	08 95       	ret

0000025e <__vector_25>:
 25e:	1f 92       	push	r1
{
	UCSR0B &= ~(1<<RXCIE0);
}

ISR(USART0_RX_vect)
{	
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	0b b6       	in	r0, 0x3b	; 59
 26a:	0f 92       	push	r0
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	Uart::buffer[Uart::messageReceiveIndex] = UDR0;
 284:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZN4Uart19messageReceiveIndexE>
 288:	48 2f       	mov	r20, r24
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 290:	fa 01       	movw	r30, r20
 292:	ef 5c       	subi	r30, 0xCF	; 207
 294:	fd 4f       	sbci	r31, 0xFD	; 253
 296:	90 83       	st	Z, r25
	if(Uart::buffer[Uart::messageReceiveIndex] == '\n') //When connecting to nano, use null 
 298:	9a 30       	cpi	r25, 0x0A	; 10
 29a:	89 f4       	brne	.+34     	; 0x2be <__vector_25+0x60>
	{//End of message from arduino serial	
		Uart::buffer[Uart::messageReceiveIndex] = '\0'; //Change newline with null
 29c:	fa 01       	movw	r30, r20
 29e:	ef 5c       	subi	r30, 0xCF	; 207
 2a0:	fd 4f       	sbci	r31, 0xFD	; 253
 2a2:	10 82       	st	Z, r1
		strncpy(Uart::lastReceivedMessage, Uart::buffer, Uart::messageReceiveIndex+1);
 2a4:	4f 5f       	subi	r20, 0xFF	; 255
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	61 e3       	ldi	r22, 0x31	; 49
 2aa:	72 e0       	ldi	r23, 0x02	; 2
 2ac:	8d e1       	ldi	r24, 0x1D	; 29
 2ae:	92 e0       	ldi	r25, 0x02	; 2
 2b0:	4c d0       	rcall	.+152    	; 0x34a <strncpy>
		Uart::messageReceiveIndex = 0;
 2b2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZN4Uart19messageReceiveIndexE>
		Uart::receivedNewMessage = true;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <__vector_25+0x66>
	}
	else
	{
		Uart::messageReceiveIndex++;
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZN4Uart19messageReceiveIndexE>
	}
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0b be       	out	0x3b, r0	; 59
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_27>:

ISR(USART0_TX_vect)
{
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	0b b6       	in	r0, 0x3b	; 59
 2f6:	0f 92       	push	r0
 2f8:	8f 93       	push	r24
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	if(Uart::messageToSend[Uart::messageToSendIndex] == '\0')
 302:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <_ZN4Uart18messageToSendIndexE>
 306:	ae 2f       	mov	r26, r30
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	a7 5f       	subi	r26, 0xF7	; 247
 30c:	bd 4f       	sbci	r27, 0xFD	; 253
 30e:	8c 91       	ld	r24, X
 310:	81 11       	cpse	r24, r1
 312:	06 c0       	rjmp	.+12     	; 0x320 <__vector_27+0x36>
	{//Check if last char sent was nul
		UCSR0A |= (1 << TXC0); // Stop sending
 314:	e0 ec       	ldi	r30, 0xC0	; 192
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	80 83       	st	Z, r24
 31e:	09 c0       	rjmp	.+18     	; 0x332 <__vector_27+0x48>
	}
	else
	{
		UDR0 = Uart::messageToSend[++Uart::messageToSendIndex];
 320:	ef 5f       	subi	r30, 0xFF	; 255
 322:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <_ZN4Uart18messageToSendIndexE>
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	e7 5f       	subi	r30, 0xF7	; 247
 32a:	fd 4f       	sbci	r31, 0xFD	; 253
 32c:	80 81       	ld	r24, Z
 32e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	}
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	8f 91       	pop	r24
 33c:	0f 90       	pop	r0
 33e:	0b be       	out	0x3b, r0	; 59
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	1f 90       	pop	r1
 348:	18 95       	reti

0000034a <strncpy>:
 34a:	fb 01       	movw	r30, r22
 34c:	dc 01       	movw	r26, r24
 34e:	41 50       	subi	r20, 0x01	; 1
 350:	50 40       	sbci	r21, 0x00	; 0
 352:	48 f0       	brcs	.+18     	; 0x366 <strncpy+0x1c>
 354:	01 90       	ld	r0, Z+
 356:	0d 92       	st	X+, r0
 358:	00 20       	and	r0, r0
 35a:	c9 f7       	brne	.-14     	; 0x34e <strncpy+0x4>
 35c:	01 c0       	rjmp	.+2      	; 0x360 <strncpy+0x16>
 35e:	1d 92       	st	X+, r1
 360:	41 50       	subi	r20, 0x01	; 1
 362:	50 40       	sbci	r21, 0x00	; 0
 364:	e0 f7       	brcc	.-8      	; 0x35e <strncpy+0x14>
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
